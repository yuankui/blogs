<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[yuankui的不老阁]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yuankui.me//"/>
  <updated>2015-07-02T05:05:35.000Z</updated>
  <id>http://yuankui.me//</id>
  
  <author>
    <name><![CDATA[yuankui]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[什么会成为选择一个工作的理由]]></title>
    <link href="http://yuankui.me/2015/07/reason-of-choosing-a-job/"/>
    <id>http://yuankui.me/2015/07/reason-of-choosing-a-job/</id>
    <published>2015-07-02T05:05:35.000Z</published>
    <updated>2015-07-02T05:05:35.000Z</updated>
    <content type="html"><![CDATA[<p>不同阶段选择不同</p>
<ol>
<li>工资</li>
<li>技术成长</li>
<li>团队leader</li>
<li>团队队友</li>
<li>公司前景,股票</li>
</ol>
<p>为什么会有这些选择,就我个人而言,进行总结:</p>
<h2 id="工资">工资</h2><p>刚毕业的时候,打不认选择一份工作的唯一标准就是工资~期权,成长都不认.</p>
<p>因为跟期权相比,只有工资是实在的,而且,毕业生求职过程中难免会攀比心理,总会主动被动的与周围的人的薪资进行对比.因此,处于维护脸面问题,往往都会把工资作为首选,至于技术方向,行业方向,一概不管.</p>
<blockquote>
<p>但是技术方向,行业方向真的是非常重要,直接影响一个人的整个职业生涯.</p>
<p>比如我们当时毕业的时候,有个同学首先拿到了腾讯的做Flash开发一个offer,工资自然没发话,其他人都是各种羡慕嫉妒恨.到现在回过头来看,Flash其实已经是一门过时的技术,学flash其实已经基本找不到工作了.</p>
</blockquote>
<h2 id="技术成长">技术成长</h2><a id="more"></a>
<p>到了公司上班之后,会逐渐发现自身的各种不足,加上信任往往有很高的学习热情,因此这个阶段,是非常渴望有着快速的成长,那首先要求工作内容是有技术挑战的,厌倦重复性的没有技术含量的劳动,相比于做日常开发,他们更倾向于选择那些有各种线上问题排查,性能优化的时候来做.</p>
<blockquote>
<p>但是回过头来看,基本上没有那种只有性能优化,没有日常开发的工作的,这两者往往是结伴而行.</p>
<p>如果做纯技术,往往容易与业务脱节,技术失去了为业务服务的初衷</p>
<p>另外一方面,技术成长,与个人自我心态也息息相关.就拿日常开发来说,既然你已经发现了日常开发是一件重复性,没有技术含量的工作,那你是否能想办法让他变成一件有技术含量,不重复劳动,解放生产力的一件事呢?如果这件事做到了,那也是一件非常大的挑战,而且这种调整,比那些解决性能问题,或者故障排查能带来更大的价值</p>
<p>总结起来就是:意识到问题,发现问题,解决问题</p>
<p>PS:之前在阿里时团队有个比较好的传统就是”吐槽”,大家一起来吐槽,一起来发现现在团队,技术上的各种问题,根据重要性紧急性分类,然后列入todolist,然后再根据意向由团队成员自己认领,推动~</p>
</blockquote>
<h2 id="团队Leader">团队Leader</h2><p>当技术上了一个台阶之后,就期望有一个好的施展空间,好的Leader可以促进下面的人充分发挥自助能动性,差的Leader会阻碍下面的人发展.</p>
<h3 id="怎么才是一个好的技术Leader?">怎么才是一个好的技术Leader?</h3><p>下一个准确的定义对我来说太难,但是我可以简单描述一下我心目中的理想Leader.</p>
<ol>
<li>布置任务,但是不限定实现方式,会在必要的时候给予帮助</li>
<li>如果不是有特别重要的事情宣布,好的Boss会在会议中作为一个倾听者,而不是演说者.</li>
<li>不会直接说人的方案不行,如果真的不行,他们引导他一步一步自己发现问题,帮助他们思考,而不是给一个结论,估计他们全面评估一个方案,优点缺点.</li>
<li>谦逊+胸怀</li>
</ol>
<p>相反,一个不是那么好的Leader:</p>
<ol>
<li>布置任务,会涉及到细节,他要求你,这件事情,就这么做就行了,不要试别的了,我已经帮你设计好了</li>
<li>会议,他永远是演讲嘉宾,就他一个人在那里说,下面的人没有发言的机会,很多问题就暴露不出来</li>
<li>对与某人提出的技术方案,你还是不要这么做了,你这么做万一系统怎么怎么样,他不去听你这样做的好处</li>
<li>心胸狭隘,自己技术不行,却也听不进其他人的意见.</li>
<li>总结起来,就是他们不懂得放权.</li>
</ol>
<blockquote>
<p>在我从阿里离职之前,遇到了一个好Leader,技术能力肯定没话说,但是还能保持非常谦虚,与他聊天,循循善诱,非常令我钦佩,可以相见恨晚.</p>
</blockquote>
<h2 id="团队队友">团队队友</h2><p>当我感觉自己技术到达一定层次之后,就会开始追求代码可读性.之前读到很多代码,难度,但是一致没有意识到这个可以用一个专业名词”可读性”来进行描述.</p>
<p>代码成为了一种与队友交流的工具,可读性差的代码容易给人埋坑,降低团队效率.具体可以参考&lt;编写可读代码的艺术&gt;这本书</p>
<p>因此这个阶段比较在意团队成员的素质问题,或者就是暂时素质不高,至少有对于素质的追求.</p>
<h2 id="公司前景">公司前景</h2><p>折腾了这么一大圈,其实忘了自己求职的目的不就是为了前景吗?</p>
<p>之前各种条件都考虑,却没有考虑公司是否有发展前景</p>
<p>比如说,如果你知道公司会在泡沫之后垮掉,你还选择留在那里,那么你就选择一个死工资,那么将来公司一旦倒闭,传说的期权,也就仅仅是空气而已.</p>
<p>如果你在一家很有前景的公司,虽然工资低一点,但是一旦将来发展好了,你也将跟着升值.</p>
<h1 id="总结">总结</h1><p>因此上述几点,其实都很重要,但是不在同的阶段,只能看到其中一部分.</p>
<p>所以,也许上面的点我也没有列全,等将来再补充把.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不同阶段选择不同</p>
<ol>
<li>工资</li>
<li>技术成长</li>
<li>团队leader</li>
<li>团队队友</li>
<li>公司前景,股票</li>
</ol>
<p>为什么会有这些选择,就我个人而言,进行总结:</p>
<h2 id="工资">工资</h2><p>刚毕业的时候,打不认选择一份工作的唯一标准就是工资~期权,成长都不认.</p>
<p>因为跟期权相比,只有工资是实在的,而且,毕业生求职过程中难免会攀比心理,总会主动被动的与周围的人的薪资进行对比.因此,处于维护脸面问题,往往都会把工资作为首选,至于技术方向,行业方向,一概不管.</p>
<blockquote>
<p>但是技术方向,行业方向真的是非常重要,直接影响一个人的整个职业生涯.</p>
<p>比如我们当时毕业的时候,有个同学首先拿到了腾讯的做Flash开发一个offer,工资自然没发话,其他人都是各种羡慕嫉妒恨.到现在回过头来看,Flash其实已经是一门过时的技术,学flash其实已经基本找不到工作了.</p>
</blockquote>
<h2 id="技术成长">技术成长</h2>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过Intellij IDEA对tomcat进行远程调试]]></title>
    <link href="http://yuankui.me/2015/06/intellij-idea-tomcat-debug/"/>
    <id>http://yuankui.me/2015/06/intellij-idea-tomcat-debug/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><ul>
<li>intellij idea 14 ultimate</li>
<li>linux</li>
<li>jdk 1.8</li>
<li>tomcat 7.0.x</li>
</ul>
<h2 id="1-_配置Intellij_IDEA">1. 配置Intellij IDEA</h2><p>添加配置,选择tomcat Server-&gt;Remote</p>
<p><img src="http://yuankui.me/uploads/1.png" alt="new server"></p>
<p>选择startup/connection标签-&gt;debug,注意到里面的配置,将其添加到tomcat的启动配置里面</p>
<p><img src="http://yuankui.me/uploads/2.png" alt="startup/connection"></p>
<p>在服务器的<code>$TOMCAT_HOME/bin/catalina.sh</code>中最上面增加:</p>
<pre><code>export <span class="variable">JAVA_OPTS=</span>'-agentlib:<span class="variable">jdwp=</span><span class="variable">transport=</span>dt_socket,<span class="variable">address=</span><span class="number">53013</span>,<span class="variable">suspend=</span>n,<span class="variable">server=</span>y'
</code></pre><p>然后重启tomcat</p>
<pre><code><span class="keyword">cd</span> <span class="label">$TOMCAT_HOME</span>
bin/shutdown.<span class="keyword">sh</span>
bin/startup.<span class="keyword">sh</span>
</code></pre><p>设置tomcat要连接的远程机器host和port,host就是服务器的地址(ip或者域名),port就是刚刚添加的port <code>53013</code></p>
<p><img src="http://yuankui.me/uploads/3.png" alt="host/port"></p>
<p>完了之后,用Intellij IDEA连接tomcat,选择debug</p>
<p><img src="http://yuankui.me/uploads/4.png" alt="host/port"></p>
<p>然后就看到显示</p>
<pre><code>Connected <span class="keyword">to</span> the target VM, addres<span class="variable">s:</span> <span class="string">'www.xxxxxxx.com:51981'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span>
</code></pre><p><img src="http://yuankui.me/uploads/5.png" alt="host/port"></p>
<p>然后就可以像在本机一样,设置断点,然后进行远程调试了   </p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/6733849/remote-debugging-in-intellij-tomcat" target="_blank" rel="external">http://stackoverflow.com/questions/6733849/remote-debugging-in-intellij-tomcat</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前提">前提</h2><ul>
<li>intellij idea 14 ultimate</li>
<li>linux</li>
<li>jdk 1.8</li>
<li>tomcat 7.0.x</li>
</ul>
<h2 id="1-_配置Intellij]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[angularJS 回调的时候，model更新，没有重绘]]></title>
    <link href="http://yuankui.me/2015/06/angularJS-failed-reredendering-when-changing-scope-outside-digest/"/>
    <id>http://yuankui.me/2015/06/angularJS-failed-reredendering-when-changing-scope-outside-digest/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><pre><code>$scope.editTask = <span class="function"><span class="keyword">function</span>(<span class="params">task</span>) </span>{
    <span class="keyword">var</span> url = <span class="string">"&lt;%=request.getContextPath()%&gt;/task/update?catlog=1&amp;taskId="</span> + task.id;
    <span class="keyword">var</span> win = <span class="built_in">window</span>.open(url);
    <span class="built_in">window</span>.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        <span class="built_in">console</span>.log(<span class="number">111</span>);
    <span class="comment">// 这里model的更新不会触发render</span>
        $scope.savedTaskList = getSolutionTaskList();
        <span class="built_in">console</span>.log(<span class="string">'update!!!'</span>);
    };
}
</code></pre><h2 id="答案">答案</h2><blockquote>
<p>You probably is changing the $scope outside of the angular <code>$digest</code>. Try replacing code making changes with <code>$scope.$apply(function(){ code making changes })</code>. With this the dirty-check should run and update all.</p>
</blockquote>
<ul>
<li><a href="http://stackoverflow.com/questions/12042422/angularjs-scope-doesnt-render-after-being-updated" target="_blank" rel="external">angularjs-scope-doesnt-render-after-being-updated</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><pre><code>$scope.editTask = <span class="function"><span class="keyword">function</span>(<span class="params">task</span]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Coding 名言]]></title>
    <link href="http://yuankui.me/2015/06/programing-quotes/"/>
    <id>http://yuankui.me/2015/06/programing-quotes/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>“ If debugging is the process of removing software bugs, then programming must be the process of putting them in. ”  - Edsger Dijkstra</p>
</blockquote>
<p>如果debug是消除bug的话，那么码代码就是加bug</p>
<blockquote>
<p>“ Rules of Optimization:<br> Rule 1: Don’t do it.<br> Rule 2 (for experts only): Don’t do it yet. ” - Michael A. Jackson</p>
</blockquote>
<p>优化的两条原则：第一，不要作；第二，至少现在不要作（不要过度设计）</p>
<blockquote>
<p>“ First, solve the problem. Then, write the code. ” - John Johnson</p>
</blockquote>
<p>先解决问题，再写代码 - 意思是先想出解决办法，再编码</p>
<blockquote>
<p>“ Any fool can write code that a computer can understand. Good programmers write code that humans can understand. ” - Martin Fowler</p>
</blockquote>
<p>写代码很容易，就算SB也会，但是只有一个好的码农才能写出好的，人能读懂的代码</p>
<blockquote>
<p>“ Linux is only free if your time has no value. ” - Jamie Zawinski</p>
</blockquote>
<p>如果你认为时间不值钱的化，那么linux确实是免费的。 - 这句话想起了那些花了大量时间去找破解软件，以及软件破解方案的人与事，浪费的时间换成钱的话，真不止这个软件的钱。</p>
<blockquote>
<p>“ There is not now, nor has there ever been, nor will there ever be, any programming language in which it is the least bit difficult to write bad code. ” - Flon’s Law</p>
</blockquote>
<p>过去，现在，将来都不会有一门语言，可以让你用轻轻松松写出优秀的代码。 - 意思就是，没有优秀的语言，只有优秀的人。</p>
<blockquote>
<p>“ Programs must be written for people to read, and only incidentally for machines to execute. ” - Abelson / Sussman</p>
</blockquote>
<p>程序应该是写给人读的，偶尔会被机器执行 - 这句话的意思是要提高代码可读性</p>
<blockquote>
<p>“ Before software can be reusable it first has to be usable. ” - Ralph Johnson</p>
</blockquote>
<p>程序可重用之前，必须先要可用。。</p>
<blockquote>
<p>“ Without requirements or design, programming is the art of adding bugs to an empty text file. ” - Louis Srygley</p>
</blockquote>
<p>如果没有需求和设计，编程就是给一个文本文件堆bug</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>“ If debugging is the process of removing software bugs, then programming must be the process of putting them in. ”  - Edsge]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[看超能陆战队]]></title>
    <link href="http://yuankui.me/2015/06/big-hero/"/>
    <id>http://yuankui.me/2015/06/big-hero/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="包含的中国元素">包含的中国元素</h1><ul>
<li>hero 的哥哥以及教授死后,被供在神龛,烧着香</li>
<li>白胖子 刚会飞的时候,带着 hero 在天空中飞翔,路过一个古建筑,是中国古代塔的造型</li>
</ul>
<blockquote>
<p>当然也包含日本元素,那就是空手道</p>
</blockquote>
<h1 id="教育意义">教育意义</h1><h2 id="哥哥就是正能量的化身,帮助弟弟成长">哥哥就是正能量的化身,帮助弟弟成长</h2><ul>
<li>最早开发白胖子的视频中,反复失败,反复尝试.坚持</li>
<li>开发白胖子为了帮助别人,为了帮助人类而兴奋.无私</li>
<li>给白胖子设定,只能帮助人类,不能伤害人类.善良</li>
<li><p>舍身去营救教授,最终被大火烧死.奉献</p>
</li>
<li><p>遵守交通规则:在被蒙面人追杀的时候,不忘了等待红绿灯以及打转向灯</p>
</li>
</ul>
<h2 id="善与恶">善与恶</h2><ul>
<li>一开始 hero 的机器人,善良以及邪恶模式的切换</li>
<li>科技公司的老板,明知机器有问题,但是仍然抱着侥幸心理,强行将教授的女儿送了进去,最终导致教授女儿的离开</li>
<li>原本善良的教授,因为女的被害,决心复仇差点杀了 hero 以及几个队友.最终被送入狱</li>
<li>主人公 hero,想为哥哥报仇,将大胖子的哥哥的善良芯片拔出,并命令杀死教授,被几个队友阻止</li>
<li>前后呼应: 从开始的不耐烦阿姨一遍又一遍的拥抱.到最后,主动的又再一次拥抱阿姨</li>
</ul>
<h1 id="当然也不乏笑料,不赘述了">当然也不乏笑料,不赘述了</h1><h1 id="喜剧片的相对完美的结局">喜剧片的相对完美的结局</h1><ul>
<li>大胖子的芯片保留了下来,hero 自己有制造的一个大胖子的躯壳,当然,新的大胖子仍然认识 hero</li>
<li>哥哥死了吗?哥哥没死,哥哥的精神已经全部寄托在了大胖子身上,也在潜意识教育人们,要做一个好人,像哥哥一样的好人.</li>
<li>教授的女儿被救了下类</li>
<li>教授因为犯了错,要接受牢狱之苦</li>
<li>几个英雄正式,用科技去帮助人们,做一个真正的 hero</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="包含的中国元素">包含的中国元素</h1><ul>
<li>hero 的哥哥以及教授死后,被供在神龛,烧着香</li>
<li>白胖子 刚会飞的时候,带着 hero 在天空中飞翔,路过一个古建筑,是中国古代塔的造型</li>
</ul>
<blockquote>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[The top Java EE best practices]]></title>
    <link href="http://yuankui.me/2015/06/javaEE-best-practices/"/>
    <id>http://yuankui.me/2015/06/javaEE-best-practices/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>Always use MVC. - Cleanly separate business logic (Java beans and EJB components) from controller logic (servlets/Struts actions) from presentation (JSP, XML/XSLT). Good layering can cover a multitude of sins.</p>
<blockquote>
<p>尽量用MVC - 明确的把业务逻辑(model)与控制层(controller)以及展现层 (view)分离开,好的分层能够适应各种需求</p>
</blockquote>
</li>
<li><p>Don’t reinvent the wheel - Use common, proven frameworks like Apache Struts, JavaServer Faces, and Eclipse RCP. Use proven patterns.</p>
<blockquote>
<p>不要重复造<strong>轮子</strong> - 多使用常用的,可靠的框架,比如apache Struts, guava. 多使用常用的设计模式</p>
</blockquote>
</li>
<li><p>Apply automated unit tests and test harnesses at every layer. - Don’t just test your GUI. Layered testing makes debugging and maintenance vastly simpler.</p>
<blockquote>
<p>尽早开始自动化测试,分层测试 - 不要单单测试gui,分层测试debug和维护起来都很方便</p>
</blockquote>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>Develop to the specifications, not the application server. - Know the specifications by heart and deviate from them only after careful consideration. Just because you can do something doesn’t mean you should</p>
<blockquote>
<p>面向切面编程. - 在适当的时候才利用面向切面编程技术,应用面向切面必须是你经过深思熟虑的,你能做某事,并不代表你就应该做某事.</p>
</blockquote>
</li>
<li><p>Plan for using Java EE security from Day One. - Turn on WebSphere security. Lock down all your EJBs and URLs to at least all authenticated users. Don’t even ask — just do it.</p>
<blockquote>
<p>一开始就要考虑使用安全问题 - 把你的EJBs和URL只开放给授权用户</p>
</blockquote>
</li>
<li><p>Build what you know. - Iterative development enbales you to gradually master all the moving pieces of Java EE. Build small, vertical slices through your application rather than doing everything at once</p>
<blockquote>
<p>不要过度设计 - 迭代编程会让你掌握javaEE的各个方面的,功能慢慢加,不要一开始就吃个大胖子..</p>
</blockquote>
</li>
<li><p>Always use session facades whenever you use EJB components. - Use local EJBs when architecturally appropriate.</p>
<blockquote>
<p>每当使用EJB的时候,都使用<a href="http://www.corej2eepatterns.com/SessionFacade.htm" target="_blank" rel="external">Session Facades模式</a> - 当架构允许的时候最好使用local EJBs.(???)</p>
</blockquote>
</li>
<li><p>Use stateless session beans instead of stateful session beans. - This makes your system more amenable to failover. Use the HttpSession to store user-specific state</p>
<blockquote>
<p>多用无状态会话 bean,少用状态会话Bean - 这样你的系统更能从业应对失败重启,利用HttpSession来存储用户相关的状态</p>
</blockquote>
</li>
<li><p>Use container-managed transactions. - Learn how two-phase commit transactions work in Java EE and rely on them rather than developing your own transaction management. The container will almost always be better at transaction optimization</p>
<blockquote>
<p>多用容器提供的事务功能 - 学习JavaEE的两阶段提交,而不要自己处理事务. 容器的实物优化往往做得更好.</p>
</blockquote>
</li>
<li><p>Prefer JSPs as your first choice of presentation technology. - Use XML/XSLT only in cases where you have multiple presentation output types that must be supported by a single controller and back-end.</p>
<blockquote>
<p>考虑视图展现的时候,尽量用JSP - 只有再你需要支持多种输出格式的时候才使用XML/XSLT</p>
</blockquote>
</li>
<li><p>When using HttpSessions, store only as much state as you need for the current business transaction and no more. - Enable session persistence</p>
<blockquote>
<p>当使用HttpSession的时候,不要存那些没关的东西 - 打开session功能</p>
</blockquote>
</li>
<li><p>Take advantage of application server features that do not require your code to be modified. - With features such as WebSphere Application Server caching and the Prepared Statement cache, the performance gains are substantial and the overhead is minimal.</p>
<blockquote>
<p>容器能够提供的功能,尽量不要自己编码 - 比如WebSphere的caching,Prepared Statement cache,这些可以让你用较低复杂提高较大性能</p>
</blockquote>
</li>
<li><p>Play nice within existing environments. - Deliver a Java EE EAR and configurable installation scripts, not a black box binary installer.</p>
<blockquote>
<p>不要影响现有应用 - 发布新应用的时候,尽量提供可配的安装脚本以及配置文件,而不要提供一个可执行的<strong>二进制</strong>文件..</p>
</blockquote>
</li>
<li><p>Embrace the qualities of service provided by the application server environment. - Design applications to be clusterable using WebSphere Application Server Network Deployment</p>
<blockquote>
<p>充分利用容器提供的服务保证 - 如果需要分布式部署的,充分利用<strong>WebSphere Application Server Network Deployment</strong></p>
</blockquote>
</li>
<li><p>Embrace Java EE, don’t fake it. - Commit to building real Java EE applications that truly leverage Java EE function</p>
<blockquote>
<p>拥抱Java EE,不要假冒它(??) - 创建一个有着Java EE功能的Jave EE应用</p>
</blockquote>
</li>
<li><p>Plan for version updates. - Change is inevitable. Plan for new releases and fix updates so that your customers can stay current.</p>
<blockquote>
<p>为升级更新做计划 - 变化是无法避免的,只有不断开发新feature,fixbug才能留得住用户</p>
</blockquote>
</li>
<li><p>At all points of interest in your code, log your program state using a standard logging framework. - This includes exception handlers. Use a logging framework like JDK 1.4 logging or Log4J</p>
<blockquote>
<p>用一个标准的日志库,将你代码的所有关注点用日记记录下来 - 包括异常处理. 使用JDK提供的日志框架或者log4j</p>
</blockquote>
</li>
<li><p>Always clean up after yourself. - If you obtain an object from a pool, always make sure you return it back to the pool.</p>
<blockquote>
<p>及时释放资源 - 如果你从一个资源池申请了某种资源,一定要及时释放</p>
</blockquote>
</li>
<li><p>Follow rigorous procedures for development and testing. - This includes adopting and following a software development methodology.</p>
<blockquote>
<p>遵循软件过程 - 包括采用某些软件开发过程</p>
</blockquote>
</li>
</ol>
<ul>
<li><a href="http://www.ibm.com/developerworks/websphere/techjournal/0701_botzum/0701_botzum.html" target="_blank" rel="external">The top Java EE best practices</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>Always use MVC. - Cleanly separate business logic (Java beans and EJB components) from controller logic (servlets/Struts actions) from presentation (JSP, XML/XSLT). Good layering can cover a multitude of sins.</p>
<blockquote>
<p>尽量用MVC - 明确的把业务逻辑(model)与控制层(controller)以及展现层 (view)分离开,好的分层能够适应各种需求</p>
</blockquote>
</li>
<li><p>Don’t reinvent the wheel - Use common, proven frameworks like Apache Struts, JavaServer Faces, and Eclipse RCP. Use proven patterns.</p>
<blockquote>
<p>不要重复造<strong>轮子</strong> - 多使用常用的,可靠的框架,比如apache Struts, guava. 多使用常用的设计模式</p>
</blockquote>
</li>
<li><p>Apply automated unit tests and test harnesses at every layer. - Don’t just test your GUI. Layered testing makes debugging and maintenance vastly simpler.</p>
<blockquote>
<p>尽早开始自动化测试,分层测试 - 不要单单测试gui,分层测试debug和维护起来都很方便</p>
</blockquote>
</li>
</ol>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-mvc给Interceptor添加FlashMap]]></title>
    <link href="http://yuankui.me/2015/06/spring-mvc-add-flashmap-in-interceptor/"/>
    <id>http://yuankui.me/2015/06/spring-mvc-add-flashmap-in-interceptor/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>用spring mvc或多或少用过FlashMap,在controller中可以很方便的进行添加,而在interceptor中,确不是那么容易</p>
<p>本文主要记录了我解决spring mvc<code>如何在interceptor中保存FlashMap(RedirectAttributes)</code>的经过</p>
<p>下面开始…</p>
</blockquote>
<h2 id="谁查看了我的flashmap?">谁查看了我的flashmap?</h2><blockquote>
<p>我们将我们的kv对存入了RedirectAttributes,spring肯定会将其保存起来,那么也就会有一个来取所有kv对的逻辑</p>
</blockquote>
<ul>
<li><code>RedirectAttributes</code>,这是一个<code>Model</code>,<code>Model</code>相当于一个Map,可以存放键值对</li>
</ul>
<pre><code>public <span class="class"><span class="keyword">interface</span> <span class="title">RedirectAttributes</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>{
    ... ...

    <span class="comment"><span class="markdown">/**
<span class="code">     * Return </span></span>the<span class="markdown"> attributes candidate for flash storage or </span>an<span class="markdown"> empty Map.
<span class="code">     */</span></span></span>
    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ?&gt; getFlashAttributes();
}
</code></pre><ul>
<li>发现里面有个一个<code>Map&lt;String, ?&gt; getFlashAttributes()</code>方法,猜测当spring-mvc框架获取我们存储的kv对,进行存储的时候,应该会调用这个方法,因此在这里找到他的实现方法,并设置一个断点,RedirectAttributes现在只有一个实现类 <code>RedirectAttributesModelMap</code></li>
</ul>
<blockquote>
<p>这里我用的是Intellij Idea,在接口方法的左边,点击向下的绿色剪头,就可以直接跳到该接口实现类的对应方法了,如果有多个实现类,会让你进行一次选择</p>
<p><img src="http://yuankui.me/uploads/2-1.png" alt="img"></p>
</blockquote>
<p><img src="http://yuankui.me/uploads/2-2.png" alt="img2"></p>
<ul>
<li>可以发现,这里spring mvc又把我们的flashAttributes放到了 <code>RequestContextUtils.getOutputFlashMap(request)</code>里面去了,通过IDE跟进去,发现他实际上就是往request对象里面暂存一些东西,并没有什么特俗的逻辑</li>
</ul>
<p><img src="http://yuankui.me/uploads/2-3.png" alt="img3"></p>
<ul>
<li>这时候我们想看看<code>RequestContextUtils.getOutputFlashMap(request)</code>到底是个什么东西,于是我们将光标移到这一行,然后右键,<code>Run to Cursor</code>(运行到鼠标处),然后在debug窗口的watch输入 <code>RequestContextUtils.getOutputFlashMap(request)</code><br><img src="http://yuankui.me/uploads/2-4.png" alt="img3"><blockquote>
<p>至此,我们得出结论,是<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#getModelAndView</code>这个方法,查看并获取了我们的kv对,那么它又是怎么将其保存起来,以便于我们下次http访问的时候,让我们的view可以访问到呢?</p>
</blockquote>
</li>
</ul>
<h2 id="他吧我的kv对保存在哪儿了?">他吧我的kv对保存在哪儿了?</h2><p>我们通过在call stack里面切换,寻找蛛丝马迹,发现有可能存储我们的kv对的方法,于是我们来到了<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>方法内部,我们发现了我们经常写的<code>Controller</code>以及<code>Interceptor</code>的处理逻辑所在,如下图</p>
<p><img src="http://yuankui.me/uploads/2-5.png" alt="img3"></p>
<ul>
<li>依次进入<ul>
<li><code>org.springframework.web.servlet.DispatcherServlet#processDispatchResult</code></li>
<li><code>org.springframework.web.servlet.DispatcherServlet#render</code></li>
<li><code>org.springframework.web.servlet.View#render</code></li>
<li><code>org.springframework.web.servlet.view.AbstractView#render</code></li>
<li><code>org.springframework.web.servlet.view.AbstractView#renderMergedOutputModel</code></li>
<li><code>org.springframework.web.servlet.view.RedirectView#renderMergedOutputModel</code></li>
</ul>
</li>
</ul>
<p><img src="http://yuankui.me/uploads/2-6.png" alt="img3"></p>
<ul>
<li><p>然后终于发现新大陆了,这里有一大片处理FlashMap的逻辑,可以方法其核心是通过<code>FlashMapManager</code>这个类来进行操作的</p>
<pre><code>FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager(<span class="built_in">request</span>);
            <span class="keyword">if</span> (flashMapManager == <span class="literal">null</span>) {
                throw <span class="keyword">new</span> IllegalStateException(<span class="string">"FlashMapManager not found despite output FlashMap having been set"</span>);
            }
flashMapManager.saveOutputFlashMap(flashMap, <span class="built_in">request</span>, <span class="built_in">response</span>);
</code></pre></li>
</ul>
<p><img src="http://yuankui.me/uploads/2-7.png" alt="img3"></p>
<h2 id="是怎么存进去的?">是怎么存进去的?</h2><pre><code>继续跟进去
<span class="tag">-</span> `<span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.servlet</span><span class="class">.FlashMapManager</span><span class="id">#saveOutputFlashMap</span>`
<span class="tag">-</span> `<span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.servlet</span><span class="class">.support</span><span class="class">.AbstractFlashMapManager</span><span class="id">#saveOutputFlashMap</span>`    <span class="tag">-</span> `<span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.servlet</span><span class="class">.support</span><span class="class">.AbstractFlashMapManager</span><span class="id">#updateFlashMaps</span>`
<span class="tag">-</span> `<span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.servlet</span><span class="class">.support</span><span class="class">.SessionFlashMapManager</span><span class="id">#updateFlashMaps</span>`
<span class="tag">-</span> `<span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.util</span><span class="class">.WebUtils</span><span class="id">#setSessionAttribute</span>`

最终发现,我们设置的<span class="tag">FlashMap</span> <span class="tag">Attributes</span>是怎么被存入<span class="tag">session</span>的
</code></pre><ul>
<li><p>最后我们将<code>模仿</code>,这段代码,手动构造flashmap,并且保存起来</p>
<pre><code><span class="comment">// create a flashmap</span>
FlashMap flashMap = new FlashMap<span class="params">()</span>;

<span class="comment">// store the message</span>
flashMap.put<span class="params">(<span class="string">"ERROR_MESSAGE"</span>, <span class="string">"this is the message"</span>)</span>;

<span class="comment">// create a flashmapMapManger with `request`</span>
FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager<span class="params">(request)</span>;

<span class="comment">// save the flash map data in session with falshMapManager</span>
flashMapManager.saveOutputFlashMap<span class="params">(flashMap, request, response)</span>;
</code></pre></li>
</ul>
<h2 id="其他">其他</h2><ul>
<li>之前在网上查找解决方案的时候,发现有人也遇到同样的问题,但是还没有人回答,于是我也顺便回答了.这是<a href="http://stackoverflow.com/questions/24475549/can-i-use-redirectattributes-or-flashmap-in-interceptor-of-spring-mvc/29178524#29178524" target="_blank" rel="external">链接</a></li>
<li>是极力推荐Intellij Idea以及<a href="https://www.jetbrains.com/" target="_blank" rel="external">Jetbrains</a>全家,诸如:WebStorm(js)/PyCharm(python)/RubyMime(ruby)/AppCode(objective)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>用spring mvc或多或少用过FlashMap,在controller中可以很方便的进行添加,而在interceptor中,确不是那么容易</p>
<p>本文主要记录了我解决spring mvc<code>如何在interceptor中保存Fl]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[构建高性能网站-读书笔记]]></title>
    <link href="http://yuankui.me/2015/06/high-perf-website/"/>
    <id>http://yuankui.me/2015/06/high-perf-website/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>花了一天时间把真本书过了一下,长了一些见识,不过这本书还是太啰嗦,讲了很多不太相关的东西,干活密度较少<br>  这里面,把一些我认为不太重要的东西去掉了</p>
</blockquote>
<h2 id="mysql">mysql</h2><ul>
<li><p>mysqlreport - mysql报表</p>
</li>
<li><p>mysql组合索引 - 提高组合查询效率</p>
</li>
<li><p>最左前缀原则 - 最左前缀：顾名思义，就是最左优先，上例中我们创建了lname_fname_age多列索引,相当于创建了(lname)单列索引，(lname,fname)组合索引以及(lname,fname,age)组合索引。</p>
</li>
<li><p>组合索引的副作用 - 当数据量少的时候,索引本身会比数据本身还大</p>
</li>
<li><p>使用慢查询分析工具 - my.conf <code>log-slow-queries = /data/slow-logs</code></p>
<ul>
<li>统计工具: mysqldumpslow &lt; mysqlsla</li>
</ul>
</li>
<li><p>索引缓存</p>
</li>
<li><p><code>show processlist\G</code> - 检查当前查询</p>
</li>
<li><p>行锁 - InnoDB</p>
<ul>
<li>update密集型 - 行锁并不是救世主</li>
</ul>
</li>
<li><p>查询缓存 - <code>query_cache_xxxx</code></p>
</li>
<li>线程池 - 持久化连接 <code>thread_cache_size = 100</code></li>
</ul>
<h2 id="负载均衡">负载均衡</h2><ul>
<li>redirect</li>
<li><p>DNS负载均衡</p>
<ul>
<li>多个A记录</li>
<li>多个CNAME别名</li>
<li>缺点 - 故障转移不好做</li>
</ul>
<blockquote>
<p>DDNS: 动态DNS,实现域名指向动态IP</p>
</blockquote>
</li>
<li><p>方向代理复杂均衡 - nginx,HAProxy,lighttpd</p>
<ul>
<li>按照权重来分配 - 权重比例可以由独立服务能力来得出</li>
<li>需要考虑自身性能以及转发开销,保证自己的服务能力不低于真正的后台服务器</li>
<li>健康检测 - 检测后台服务器的健康状态,如果fail了要踢掉</li>
</ul>
</li>
<li><p>粘滞会话 - 保证一个用户多次请求落到一台机器,这样保持用户服务器内部的session,以及动态内容缓存</p>
<ul>
<li>nginx: ip_hash,<a href="http://www.oschina.net/question/12_621" target="_blank" rel="external">cookie hash</a></li>
<li>URI hash: 可以充分利用一台服务器的某种功能处理能力,提高cache命中率</li>
</ul>
</li>
<li><p>ip负载均衡 - DNAT,NetFilter/iptables,IPVS,LVS</p>
<ul>
<li>原理: 在传输层对数据包的ip地址和端口进行修改</li>
<li>NAT服务器可能存在瓶颈</li>
<li>DR - Direct Routine(lvs): 直接路由 - 实际服务器的响应数据直接发送给客户端,不经过调度器 - 工作在数据链路层<ul>
<li>ip别名,arp</li>
</ul>
</li>
<li>IP Tunneling</li>
</ul>
</li>
</ul>
<h2 id="文件共享">文件共享</h2><ul>
<li>NFS - sun开发,linux自带<ul>
<li>nfsstat - 统计</li>
<li>多台服务器将文件服务器的目录mount到本地</li>
</ul>
</li>
</ul>
<h2 id="文件分发">文件分发</h2><ul>
<li>ssh: scp,SFTP<ul>
<li>多级分发</li>
</ul>
</li>
<li>WebDAV</li>
<li>rsync<ul>
<li>rsyncd - 据说比基于ssh的rsync开销小</li>
<li>缺陷: 当文件过多的时候,会全盘扫描,效率低</li>
</ul>
</li>
<li>Hash Tree: 文件多级目录存储,每个文件的更新触发父目录gmt_update更新,这样就可以通过gmt_update来排除那些没有更新的目录以及文件</li>
<li><p>通过inotify来实现当文件更新后,回调使其父目录更新时间更新的api</p>
</li>
<li><p>反向代理 - 实际上就是网络文件本地缓存</p>
</li>
</ul>
<h2 id="分布式文件系统">分布式文件系统</h2><ul>
<li><a href="http://soulboy.blog.51cto.com/4007306/1338192" target="_blank" rel="external">MogileFS</a></li>
</ul>
<h2 id="数据库扩展">数据库扩展</h2><h3 id="mysql-1">mysql</h3><ul>
<li>主从复制<ul>
<li>简单的配置即可实现</li>
</ul>
</li>
<li>读写分离</li>
<li><strong>数据库反向代理</strong> - mysql proxy<ul>
<li>实现把写请求定向到主服务器,读请求定向到从服务器</li>
</ul>
</li>
<li>垂直分区 - 不想关的库分开存储</li>
<li>水平分区 - 分库分表 - sharding - 哈希(取模或者其他)</li>
<li>分区反向代理 - spock proxy</li>
</ul>
<h2 id="分布式计算">分布式计算</h2><ul>
<li>异步计算<ul>
<li>分布式消息队列</li>
</ul>
</li>
</ul>
<h2 id="性能监控">性能监控</h2><ul>
<li>Nmon</li>
<li>SNMP</li>
<li>Nagios</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>花了一天时间把真本书过了一下,长了一些见识,不过这本书还是太啰嗦,讲了很多不太相关的东西,干活密度较少<br>  这里面,把一些我认为不太重要的东西去掉了</p>
</blockquote>
<h2 id="mysql">mysql</h2><ul]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[素质需要经济来承载]]></title>
    <link href="http://yuankui.me/2015/06/economy-and-nature/"/>
    <id>http://yuankui.me/2015/06/economy-and-nature/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>听某天的逻辑思维有感</p>
</blockquote>
<h3 id="公司内部矛盾">公司内部矛盾</h3><p>不是因为公司文化不行,而是因为没有前途,多数人来竞争少部分利益,试想,如果每个人都拥有客观的收入,都能享受生活,谁还有精力自讨没趣,与人产生矛盾.</p>
<h3 id="开源事业">开源事业</h3><p>[大教堂与集市]的作者认为:开源事业是一种礼物文化,就是你物质上已经满足了的前提下,你追求的是声望.</p>
<p>而通过开源,你可以迅速积累声望.而中国开源事业之所以起不来,或者说开源事业在小公司里面起不来,原因还是,小公司连养活自己都成问题,哪还有精力搞开源养活别人;中国人因为养活自己成了问题,因此也就没有多少精力来追求声望!声望是啥,能吃吗?</p>
<h3 id="中国人的素质">中国人的素质</h3><p>中国虽然富强了,但是要论人均,在世界上就排不上号了.</p>
<p>都说中国人素质不行,你温饱都成问题,你还有精力讲素质吗?当人穷途末路的时候,所有平日里不能吃的,都能吃起来.吃都吃不饱,谁还在意衣服是否干净,地板是否干净(有,但是是极少数)</p>
<p>所以要想提高国民素质,先让人民过上好日子吧.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>听某天的逻辑思维有感</p>
</blockquote>
<h3 id="公司内部矛盾">公司内部矛盾</h3><p>不是因为公司文化不行,而是因为没有前途,多数人来竞争少部分利益,试想,如果每个人都拥有客观的收入,都能享受生活,谁还有精力自讨没趣]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员面试常用问题分析]]></title>
    <link href="http://yuankui.me/2015/06/common-interview-questions/"/>
    <id>http://yuankui.me/2015/06/common-interview-questions/</id>
    <published>2015-06-05T15:42:41.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_你为什么离职?">1. 你为什么离职?</h2><p>最直接的,对方是想知道你离职的原因.</p>
<h3 id="不要这样回答">不要这样回答</h3><ul>
<li>前公司给的工资太低了/你们给的工资高</li>
<li>前公式同事太难相处,他们水平不行</li>
<li>前公司人太多,我难以往上爬(虽然这是事实,但也不要说得这么直接)</li>
<li>前公司加班太多/听说你们不加班</li>
</ul>
<h3 id="分析">分析</h3><p>可能的离职原因</p>
<ul>
<li><p>薪资</p>
<ul>
<li><p>不满足于现在的薪资,如果你这么回答了,面试官可能就会根据你的回答顺便问你现在的薪资,进而可以了解到你对自己的定位,然后面试官可以根据后面表现来了解到你是否对自己有个正确的认识,如果忽悠成功,你可能拿到你期望的工资,如果不成功,面试官可能认为你不能正确了解自己的能力.可能直接pass了.</p>
<p>因此,面试的时候,也最好不要提因为薪资太低,公司都有一个观点,就是<strong>薪资永远是滞后于能力的</strong></p>
</li>
</ul>
</li>
<li><p>人际:如果直接回答人际关系不好,风险是很大的,除非你说的的的确确在理.</p>
<ul>
<li>跟同事闹矛盾,你就想要提出辞职,可能面试官就会认为你不成熟,又或者不能正式与同事间的问题,而选择逃避的方式.他会想如果真聘用你,将来也有可能继续跟同事闹矛盾,到时候是否你就会继续跳槽呢,因此,这对于一个公司来说是很讨厌的事情</li>
<li>不满于上级的管理方法,而你又无力改变,这种情况,除非你明确说明了,你是经过多次努力,试图说服主管,但是确无效,并且你要也让面试官认为你是对的,这样才能在这一点上给你加分,否则就会让面试官认为你是一个不好管理的家伙.</li>
</ul>
</li>
<li><p>发展</p>
<p>  发展问题,可以归为两类:一类属于主动寻求发展,另一类属于被动寻求发展</p>
<ul>
<li>主动: 这种一般给面试官的印象不太好,他们会给面试官一种墙头草,跳槽狂的印象,今天你觉得这个公司好,你就去了这个公司,明天你觉得那个公司好你也会去另外一个公司?因此面试官往往会认为这种人留不住,不能给公司带来持续的价值</li>
<li><p>被动: 因为各种原因,在之前的公司发展受限,可能有雨机制原因,可能由于机遇原因,你不得不寻求新的发展,如果增加说明你也纠结了很久,说你是如何如何舍不得之前的同事,你是如何如何重感情的人,但是由于客观原因,你不得不离开现在的团队,相信会加分不少</p>
<p>这里切忌盲目地,赤裸裸的拍新公司的马屁,那样会让面试官觉得很假.反倒是画蛇添足</p>
</li>
</ul>
</li>
<li><p>压力</p>
<p>  一般创业公司都需要有干劲的人,喜欢不怕加班,因此如果你直接说你是因为之前公司压力太大而离开的话,就算真的很大,那面试官的印象也是,你这个人抗压能力不行,动不动就通过离职.将来要是继续遇到点压力,那还不得继续离职,这对公司来说无疑是一种损失</p>
<p>  因此在面试的时候,最好不要提工作压力的事情,如果被问到是否介意加班,最好回答:<strong>偶尔因为项目需要加个班当然是义不容辞,但是要是常年加班,那肯定是哪里出了问题.</strong></p>
</li>
</ul>
<h3 id="总结">总结</h3><p>既不要说过去公司的不好,也不要说现在公司有多好.说之前公司的不好可能过段时间又会说现在公司的不好;说现在公司的好,可能过段时间又会说将来公司的好了</p>
<blockquote>
<p>而应该说:<strong>过去公司很好,我很感恩,他给了我很多,但是,由于某些原因,我不得不离开,很遗憾!</strong></p>
</blockquote>
<h2 id="2-_你觉得你之前的同事怎么样?">2. 你觉得你之前的同事怎么样?</h2><p>这个问题是个陷阱问题,稍微不注意,面试者就容易掉进去.</p>
<h3 id="别这样">别这样</h3><p>本能的听到这个问题后,面试者肾上腺素就会大量分泌,心中对于前同事的吐槽犹如脱缰的野马:他们太SB了,愣头青,无语,主管毛技术不懂,都没我牛逼…</p>
<p>你花了半个小时候吐槽完了,面试官也说,<em>今天累了,你回去等消息吧.</em></p>
<h3 id="分析-1">分析</h3><p>面试官这么问的目的主要是确认,你是否是一个容易相处的人.你回答的放心就只有一个,那就是夸前同事,赞美他们</p>
<blockquote>
<p>他们都很优秀,从他们身上学到很多,尤其是某某师兄,某某主管,和我一起通宵排查问题…(先宏观,再秀细节,细节是必须的,因为细节最能打动人嘛!)</p>
</blockquote>
<h3 id="总结-1">总结</h3><blockquote>
<p>只能赞扬,最要有细节体现</p>
</blockquote>
<p>(未完待续)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_你为什么离职?">1. 你为什么离职?</h2><p>最直接的,对方是想知道你离职的原因.</p>
<h3 id="不要这样回答">不要这样回答</h3><ul>
<li>前公司给的工资太低了/你们给的工资高</li>
<li>前公式同事太难相处,他们水平不]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记 - 程序员思维训练]]></title>
    <link href="http://yuankui.me/2015/05/progmatic-thinking-and-learning/"/>
    <id>http://yuankui.me/2015/05/progmatic-thinking-and-learning/</id>
    <published>2015-05-05T15:25:48.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<p>程序员的思维修炼【美】Andy Hunt - <a href="http://book.douban.com/subject/26268555/" target="_blank" rel="external">豆瓣链接</a></p>
<h2 id="1-1_再提“实用”">1.1 再提“实用”</h2><blockquote>
<p>Only dead fish go with the flow.</p>
</blockquote>
<h2 id="2-2_德雷福斯模型的5个阶段">2.2 德雷福斯模型的5个阶段</h2><blockquote>
<p>新手需要指令清单。<br>Novices need recipes.</p>
</blockquote>
<p>注: 新手需要步骤</p>
<blockquote>
<p>高级新手不想要全局思维。<br>Advanced beginners don’t want the big picture.</p>
</blockquote>
<p>注: 高级新手</p>
<blockquote>
<p>胜任者能够解决问题。<br>Competents can troubleshoot.</p>
<p>精通者能够自我纠正。<br>Proficient practitioners can self-correct.</p>
</blockquote>
<p>注: 会反思，找出问题</p>
<a id="more"></a>
<blockquote>
<p>对于新手来说，这只是一个指令清单。测试什么？是所有的setter和getter方法，还只是打印语句？他们最终会测试所有无关的东西。<br>但是，处于精通水平的人员知道什么地方有可能出错，或者更确切地说，什么地方非常有可能出错。他们具有经验和判断力，能够理解这句格言在情境中意味着什么。事实证明，理解情境是成为专家的关键。</p>
</blockquote>
<p>注: 新手与专家的区别，要区别对待</p>
<blockquote>
<p>专家凭直觉工作。<br>Experts work from intuition.</p>
</blockquote>
<p>注: 他们知道哪些细节无关，哪些细节重要！</p>
<blockquote>
<p>这位专家知道。专家知道哪些是无关紧要的细节，哪些是非常重要的细节</p>
</blockquote>
<h2 id="2-3_现实中的德雷福斯模型：赛马和赛羊">2.3 现实中的德雷福斯模型：赛马和赛羊</h2><blockquote>
<p>达尔文说过：“无知往往来自于自信而不是知识。”<br>反过来似乎也是对的。一旦你真的成为了一名专家，你会痛苦地意识到你知道的是多么少。</p>
</blockquote>
<p>注: 半挂水，响叮当</p>
<blockquote>
<p>规则断送专家。<br>Rules ruin experts</p>
<p>当然，从新手到专家的过程涉及的不仅仅是规则和直觉。在你</p>
<p>元认知（metacognitive）能力，或者自我认知的能力，</p>
</blockquote>
<p>注: 认识认识事物的自己</p>
<h2 id="2-4_有效地使用德雷福斯模型">2.4 有效地使用德雷福斯模型</h2><blockquote>
<p>，积极的实践需要四个条件。<br>需要一个明确定义的任务。<br>任务需要有适当难度——有挑战性但可行。<br>任务环境可以提供大量</p>
</blockquote>
<p>注: 最那些有一定难度的事情，并且反复纠错，自省</p>
<blockquote>
<p>你成了某个领域的专家，在别的领域成为专家就会变得更容易。至少你已经有了现成的获取知识的技能和模型构建的能力。</p>
</blockquote>
<p>注: 专家之路是相通的</p>
<blockquote>
<p>模仿<br>吸收<br>创新</p>
</blockquote>
<p>注: 学习的三步</p>
<h2 id="2-5_警惕工具陷阱">2.5 警惕工具陷阱</h2><blockquote>
<p>不要屈服于工具或者模型的虚假权威。没有什么可以替代思考。</p>
</blockquote>
<p>注: 要思考</p>
<h2 id="2-6_再一次考虑情境">2.6 再一次考虑情境</h2><blockquote>
<p>认识到新手需要与情境无关的规则，而专家使用与情境相关的直觉。</p>
</blockquote>
<p>注: 专家依赖情景</p>
<blockquote>
<p>你可能已经注意到，高价顾问最喜欢回答说：“具体情况具体分析。”当然，他们是对的。他们的分析依赖于很多事情——所有那些专业人士懂得去寻找的、至关重要的细节，同时忽略无关的细节。情境在起作用。</p>
</blockquote>
<p>注: 具体问题具体分析，方法重要的细节，忽略无用的细节</p>
<blockquote>
<p>对于“破门而入”的例子，只是说“我想打开这个锁住的门”是完全不够的。情境是什么？为什么需要打开这扇门？可以使用斧子、锯子或者开锁工具吗？或者我们能不能就绕到后面去开另一扇门？</p>
</blockquote>
<p>注: 这就是具体问题具体分析</p>
<h2 id="2-7_日常的德雷福斯模型">2.7 日常的德雷福斯模型</h2><blockquote>
<p>你的需求取决于你所处的技能水平。随着时间推移，你的个人学习和成长所需要的东西会改变。当然，在团队中你同样需要先考虑他人的技能水平，然后再判断自己该如何倾听、响应他们的意见。</p>
</blockquote>
<p>注: 判定他人的水，然后做出恰当的倾听和反应</p>
<h2 id="3-1_双CPU模式">3.1 双CPU模式</h2><blockquote>
<p>：R型对直觉、问题解决和创造性非常重要。L型让你细致工作并实现目标。每一种模式都有助于大脑的工作，如果想获得最佳性能，需要两种模式协同工作。下面让我们研究一下这些重要认知模式的细节。</p>
</blockquote>
<p>注: 理性与感性</p>
<blockquote>
<p>在一个真正的全息图中（使用激光制作），胶卷的每一张都包含整个图像。也就是说，如果你把胶卷分为两半，每一半仍然具有完整的图像，只是保真度或者分辨率低一些</p>
</blockquote>
<p>注: 完整的图，只是分辨率在变化</p>
<blockquote>
<p>曾经某个清晨，你是否驱车上班，然后突然意识到你记不起刚刚过去的十分钟的驾车过程？大脑认为那些不是非常有用的数据，所以没有费力建立索引。这导致想要回忆那些过程有一点困难。<br>然而，当你努力解决一个问题时，R型进程会搜索你的所有记忆以寻找解决方案。这包含了所有未被索引的数据（比如你在学校里打瞌睡时听的课）。它们可能真的会派上用场。</p>
</blockquote>
<p>注: 记忆都在，只是有的没有索引，需要很长时间回忆</p>
<h2 id="3-2_随时（24×7）记录想法">3.2 随时（24×7）记录想法</h2><blockquote>
<p>每个人都有好点子，但很少有人付诸行动</p>
</blockquote>
<p>注: 点子金字塔</p>
<h2 id="3-3_L型和R型的特征">3.3 L型和R型的特征</h2><blockquote>
<p>。最重要的是，它是直觉性的、跳越性的思维，通常基于不完整的模式、直觉、感觉或者视觉影像来做判断。</p>
</blockquote>
<p>注: 感应思维</p>
<blockquote>
<p>我们需要更多地使用R型，因为R型能够提供直觉，这是成为一名专家所迫切需要的</p>
</blockquote>
<h2 id="3-4_R型的崛起">3.4 R型的崛起</h2><blockquote>
<p>已知的问题（比如代码的bug、糟糕的组织流程、欠缺的用户界面或混乱的管理）如果不加以改正会产生病毒一样的影响，最终造成更大损害。</p>
</blockquote>
<p>注: 悬崖勒马</p>
<blockquote>
<p>诀窍10：争取好的设计，它真的很有效。</p>
</blockquote>
<p>注: 好的赏心悦目</p>
<blockquote>
<p>模式匹配</p>
</blockquote>
<p>注: 右脑</p>
<h2 id="3-5_R型看森林，L型看树木">3.5 R型看森林，L型看树木</h2><blockquote>
<p>你想发现全局、整体的模式，你需要R型；如果你需要分析部分和细节，你需要L型</p>
</blockquote>
<p>注: 全局</p>
<h2 id="3-6_DIY脑部手术和神经可塑性">3.6 DIY脑部手术和神经可塑性</h2><blockquote>
<p>同时请注意输入设备没有特别高的分辨率，只有大约256像素。但是大脑自行填补进了足够的细节，即使这种低分辨率的输入也足够了。</p>
</blockquote>
<p>注: 右脑起作用，右脑善于联想，善于模式匹配</p>
<blockquote>
<p>，那些不相信自己能增长智力的学生的确做不到。而那些相信自己大脑可塑性的学生则能够很容易提高能力。</p>
</blockquote>
<p>注: 相信自己</p>
<blockquote>
<p>你持续使用和实践的技能会逐渐占据统治地位，这样一来，大脑里就会有更多的部位被关联起来。</p>
</blockquote>
<p>注: 唯手熟尔</p>
<h2 id="3-7_如何更上一层楼">3.7 如何更上一层楼</h2><blockquote>
<p>有意识地努力学习一种新事物，通过综合而不是分析。</p>
</blockquote>
<p>注: 不要陷入细节</p>
<h2 id="4-1_启动感观输入">4.1 启动感观输入</h2><blockquote>
<p>显示，使用多感观技术可以让学生的学习效果提高5倍。</p>
</blockquote>
<p>注: 形象化学习，模式学习</p>
<blockquote>
<p>增加感观体验以促进大脑的使用。</p>
</blockquote>
<p>注: 听歌，画画</p>
<h2 id="4-2_用右脑画画">4.2 用右脑画画</h2><blockquote>
<p>绘画即是观察。<br>“Drawing” is really about seeing.</p>
</blockquote>
<p>注: 不是你画不好，而是你观察得不好</p>
<h2 id="4-3_促成R型到L型的转换">4.3 促成R型到L型的转换</h2><blockquote>
<p>让我们经历了多感官的、亲身实践的情境，帮助我们有了初步了解。然后，他再进行一次传统的、充满针对性的授课。</p>
</blockquote>
<p>注: 先demo,在再文档</p>
<blockquote>
<p>。你需要让R型打头阵，然后转到L型去“生产”出来。<br>诀窍13：R型开路，L型紧跟。</p>
<p>酒醉写作，酒醒修改</p>
<p>工作时，一人用L型，另一人用R型。<br>Work with one person in L-mode, one in R-mode.<br>极限编程提倡的一个颇为有效且有争议的实践就是结对编程。</p>
</blockquote>
<p>注: 两人作用不一样，写代码的用左脑，看的人负责指路，全局观，使用右脑</p>
<blockquote>
<p>隐喻是一种激发创造力的强大技术。<br>诀窍14：使用隐喻作为L型和R型相融之所。</p>
<p>虽然所有的隐喻最终都会瓦解，但是在这之前我们抱有的想法应该是，一个足够丰富的隐喻有助于指导系统的设计和解决开发过程中出现的</p>
</blockquote>
<p>注: 英语其实是将抽象的东西具现化</p>
<blockquote>
<p>接着说：“为什么我们会用错隐喻？为什么add()相对的函数并不总是delete()？为什么我们向容器中insert()东西而不是add()？程序员们对隐喻的使用并不认真——表单（table）根本不像表单，线程（thread）不像线程，存储单元（memory cell）既不像存储也不像单元。”</p>
</blockquote>
<p>注: 这个又可以说到变量命名了</p>
<blockquote>
<p>他还说曾经偶然用车钥匙开家门，开着公寓在大街上兜风。</p>
</blockquote>
<p>注: 车钥匙开门，载着房子在大街上兜风</p>
<blockquote>
<p>诀窍15：培养幽默感以建立更强大的隐喻。</p>
</blockquote>
<h2 id="4-4_收获R型线索">4.4 收获R型线索</h2><blockquote>
<p>一切输入都被存储。<br>Every input gets stored.</p>
<p>第二天他描述噩梦时说，他的注意力集中在“可笑的长矛”上。因为这些长矛的前端钩子上有洞，这就像是手持缝纫针上的洞，只不过后者是在末梢上。<br>伊莱亚斯接着获得了自动缝纫机的第一份美国专利，这要归功于他来之不易的灵感：缝纫机针的洞需要与平常的手持针方向相反。</p>
</blockquote>
<p>注: 在梦中获得灵感，右脑又与潜意识相关</p>
<blockquote>
<p>首先，找一个问题。然后，闭上眼睛，再把脚搁在桌子上（能以这种姿势工作可是超棒的），默想大约10分钟。<br>对于经过大脑的图像，做如下处理。<br>观察图像，努力看清所有细节。<br>大声地描述出来（真正发出声音，这很关键）。现在把脚翘在桌子上自言自语。<br>利用全部五种感观想象它（或者根据实际情况尽量运用所有感观）。<br>使用现在时态，即使该图像都溜跑了。<br>通过明确地把注意力集中到稍纵即逝的画面中，你对该图像使用了更多的途径并加强了联系。当努力解释这种画面时，你扩展了提供给R型思维的搜索参数，这有助于凝聚相关信息。无论如何，密切关注意识中掠过的“随机”图像，就可以开始有一些新的领悟。<br>这不是魔力，可能对你有效也可能无效，但是这的确是一种与大脑剩余部分交互的好办法。<br>很多人用这种方式可能看不到任何图像。在这种情况下，你可能需要动动手来随便引发一张图像，轻微擦拭自己的眼睛或者短暂地凝视光源（这会产生一种称为光幻视的东西——从非可视源获取光的感觉）。<br>图像的来源并不是那么重要，重要的是你如何解释它。稍后我们会再讨论这种现象</p>
</blockquote>
<p>注: 学习与潜意识沟通</p>
<blockquote>
<p>早上刚起床时，你还没有像你想的那样清醒。潜意识仍然占主角。你还没有提起所有防备，也还未适应有限的现实世界。你可以直接连通R型，至少一小会儿。</p>
</blockquote>
<p>注: 晨写</p>
<blockquote>
<p>他知道当他逐渐入睡时，潜意识会接手他面临的问题并提供解决办法。当他熟睡时，滚珠会掉下来，撞击声就会把他叫醒。然后他就记下脑子里面的所有事情</p>
</blockquote>
<p>注: 欺骗潜意识来解决问题，突然惊醒，抓潜意识一个现形</p>
<blockquote>
<p>。L型是主动性的：当你集中注意力时，L型就在工作。R型则不同，你不能命令它，只能邀请它。</p>
</blockquote>
<p>注: 邀请他，欺骗他，他很强大，但是他跟害羞</p>
<h2 id="4-5_收获模式">4.5 收获模式</h2><blockquote>
<p>不要努力预防难以发现的bug，努力找到三四种会主动引起bug的方式。这样，你可以发现到底会发生什么。在用户界面设计时或许也可以尝试同样的方法：不要努力去想完美的格式或者流程，先做一个最差的设计方案。这将帮助你意识到什么是真正重要的。</p>
</blockquote>
<p>注: 倒过来想问题</p>
<h2 id="4-6_正确理解">4.6 正确理解</h2><blockquote>
<p>你不能单独使用R型或者单独使用L型。相反，你需要组织学习和思维过程以支持R型到L型的转换。</p>
</blockquote>
<p>注: 由右脑到左脑的转变</p>
<h2 id="5-1_了解认知偏见">5.1 了解认知偏见</h2><blockquote>
<p>仅仅因为两个变量相关并不能认定其中一个是因另外一个是果。比如，看看有关居住在高压线下面的家庭白血病发病率更高的报告。新闻标题甚至会说高压线导致癌症。</p>
</blockquote>
<p>注: 识别相关性和因果性</p>
<blockquote>
<p>：记住标题：“很少”不意味着“没有”。</p>
</blockquote>
<h2 id="5-2_认清时代影响">5.2 认清时代影响</h2><blockquote>
<p>情境。<br>Consider the context.</p>
<p>诀窍21：从多个角度看待问题。</p>
</blockquote>
<h2 id="5-3_了解个性倾向">5.3 了解个性倾向</h2><blockquote>
<p>并非所有的奖励都受欢迎<br>大多数公司通过表扬和认可奖励团队，但这并不一定适合所有性格类型。特别是对外向型起作用的奖励可能并不适用于所有程序员。</p>
</blockquote>
<p>注: 因人施奖</p>
<blockquote>
<p>诀窍22：尊重不同人的不同性</p>
</blockquote>
<h2 id="5-4_找出硬件问题">5.4 找出硬件问题</h2><blockquote>
<p>找出硬件问题</p>
</blockquote>
<p>注: 人性的弱点！</p>
<blockquote>
<p>诀窍23：像高级动物一样行动，请做深呼吸，而不要张口嘶鸣。</p>
</blockquote>
<p>注: 冷静，解决问题！</p>
<h2 id="5-5_现在我不知道该思考什么">5.5 现在我不知道该思考什么</h2><blockquote>
<p>诀窍24：相信直觉，但是要验证。</p>
</blockquote>
<p>注: 相信直觉，但用事实说话</p>
<h2 id="6-2_瞄准SMART目标">6.2 瞄准SMART目标</h2><blockquote>
<p>在这里，SMART代表具体的、可度量的、可实现的、相关的和时间可控的（Specific, Measurable, Achievable, Relevant, and Time-boxed）。对于任何目标</p>
</blockquote>
<p>注: 目标的5点</p>
<blockquote>
<p>努力实现目标任务，不管采用什么方法，你必须能够度量它。</p>
</blockquote>
<p>注: 比如看一本书，每天看100页，本周看完</p>
<blockquote>
<p>诀窍25：建立SMART任务实现你的目标。</p>
<p>没有任何一个目标是孤岛。目标必须在更大的背景下才有意义，</p>
</blockquote>
<p>注: 目标会互相影响，不要相互造成负面影响</p>
<h2 id="6-3_建立一个务实的投资计划">6.3 建立一个务实的投资计划</h2><blockquote>
<p>PIP：制定具体计划<br>制定计划就是巨大的进步。计划要具体，要运用SMART目标理念，要为不同时间段设计不同层次的目标。例如：<br>现在（你下一步的行动）<br>明年的目标<br>五年后的目标</p>
</blockquote>
<p>注: 1 订计划</p>
<blockquote>
<p>你必须主动地随时重新评估你的投资。它符合预期吗？从你开始投资以后，世界上有什么关键技术或者重要人物发生改变吗？</p>
</blockquote>
<p>注: 随时评估</p>
<blockquote>
<p>增加两个新的学习领域，让你的知识投资变得多样化。</p>
</blockquote>
<p>注: 知识多样化</p>
<blockquote>
<p>设置提醒，让自己定期、阶段性地重新评估投资计划。哪些发生了改变，哪些已没有意义，现在你要做什么？</p>
</blockquote>
<p>注: 定期评估</p>
<h2 id="6-4_使用你的原生学习模式">6.4 使用你的原生学习模式</h2><blockquote>
<p>诀窍27：发现你的最佳学习方式。</p>
</blockquote>
<p>注: 每个人最佳学习方式不一样</p>
<h2 id="6-7_使用SQ3R法主动阅读">6.7 使用SQ3R法主动阅读</h2><blockquote>
<p>这项学习一本书或其他印刷品的方法称为SQ3R，是该方法具体步骤的首字母缩写。</p>
</blockquote>
<p>注: 通过快速扫描目录，得出初步印象。问问题，读书并回答问题，总结</p>
<h2 id="6-8_使用思维导图">6.8 使用思维导图</h2><blockquote>
<p>写作与阅读一样重要。<br>Writing is as important as readin</p>
<p>诀窍30：同时用R型和L型做笔记。</p>
</blockquote>
<p>注: 大概，细节</p>
<h2 id="6-10_以教代学">6.10 以教代学</h2><blockquote>
<p>学习某项事物的最简单和有效的方法是尝试教别人。</p>
</blockquote>
<p>注: 自我教学<br>第7章 积累经验</p>
<blockquote>
<p>通过构造来学习，而不是通过学习来构造。<br>更好地利用反馈，让失败也变得有意义。<br>让大脑提前为成功构建神经网络。</p>
</blockquote>
<p>注: 如何学习</p>
<h2 id="7-1_为了学习而玩耍">7.1 为了学习而玩耍</h2><blockquote>
<p>趣味性很重要。<br>Fun is OK.</p>
</blockquote>
<p>注: 趣味学习</p>
<h2 id="7-3_正确对待实践中的失败">7.3 正确对待实践中的失败</h2><blockquote>
<p>错误是发现的大门。</p>
<p>“错误有益于我们，因为它们让我们思索到底发生了什么，知道什么地方错了，然后通过理解，纠正它。”</p>
</blockquote>
<p>注: 错误的价值！但不要反复犯同样的错误</p>
<blockquote>
<p>开头把事情做好并不重要，重要的是最后把事情做好</p>
</blockquote>
<p>注: 最终把事情做好就行</p>
<blockquote>
<p>在你的环境中安全地探索、创造和应用。</p>
</blockquote>
<p>注: 安全的环境意思是不要造成难以挽回的破坏</p>
<blockquote>
<p>能够原路返回稳定状态</p>
<p>重现任意时刻的工作产品</p>
<p>最终，如果没有反馈，你一无所获。</p>
</blockquote>
<p>注: 反馈很重要</p>
<h2 id="7-4_了解内在诀窍">7.4 了解内在诀窍</h2><blockquote>
<p>改进学习方法的很多内容来源于葛维有关减少失败诱因干扰和利用反馈的理念。</p>
</blockquote>
<p>注: 减少失败诱因：不要在一个网络不好的环境下尝试socket编程。<br>利用反馈：所见即所得</p>
<blockquote>
<p>通过探索可以学得更好，而不是指令。<br>We learn best by discovery, not instruction.</p>
</blockquote>
<p>注: 探索可以学的更好</p>
<blockquote>
<p>不要把精力放在纠正一个一个的细节上，只需要具有意识。接受事实是第一步，只要意识到它即可。不要做出判断，不要急于拿出方案，不要指责。</p>
</blockquote>
<p>注: 让学生自己意识到问题，引导学生改正它</p>
<blockquote>
<p>太多程序员（包括我自己）往往在没有完全明白真正的错误是什么之前就着急修正它。匆忙地作出判断或者过早地进行修补。你需要首先完全明白系统的原理，然后再判断哪部分错了，最后提供解决方案。</p>
</blockquote>
<p>注: 先弄清楚系统原理，然后判断哪儿错了，然后才给出方案</p>
<h2 id="7-5_压力扼杀认知">7.5 压力扼杀认知</h2><blockquote>
<p>当面对时间压力时，人最没有创造力。</p>
</blockquote>
<p>注: 考试，时间越紧张，作文就越没有思绪</p>
<blockquote>
<p>当你认为时间至关重要时，R型根本没有机会工作。<br>你的搜索引擎、创造力和聪明才智也是这样。正如我们之前提到的滑雪教练或者贝司老师，由于他们释放了一连串的口头指令，你的思维也会被冻结。R型同样被拒之门外了。</p>
<p>诀窍37：允许失败，你会走向成功。</p>
</blockquote>
<p>注: 从错误中学习</p>
<blockquote>
<p>。在众人强烈的关注下，我们难以观察和表现出色；在最后期限的压力下，我们也难以让思想开花结果</p>
<p>。想一想单元测试的敏捷实践。这里，你可以自由地允许单元测试失败——甚至是鼓励失败。你从中有所收获，修改代码，继续前进。</p>
</blockquote>
<p>注: 单侧允许失败</p>
<h2 id="7-6_想象超越感观">7.6 想象超越感观</h2><blockquote>
<p>看法是基于预测的。</p>
</blockquote>
<p>注: Cache失效<br>第8章 控制注意力</p>
<blockquote>
<p>增强注意力<br>管理你的知识<br>优化当前情境</p>
</blockquote>
<h2 id="8-2_通过分散注意力来集中注意力">8.2 通过分散注意力来集中注意力</h2><blockquote>
<p>当你闲坐着思考问题的时候，你是在“工作”吗？</p>
</blockquote>
<p>注: 在思考问题，其实也是在工作</p>
<blockquote>
<p>现在对程序员（或其他知识工作者）有一种普遍的误解，如果你没有在键盘上打字，你就没有在工作。</p>
</blockquote>
<p>注: 思考算工作吗？</p>
<blockquote>
<p>一般情况下，如果你不能想出计划可能出错的三种方式，或想出一个问题的三种不同解决方法，那么你的思考还不充分</p>
</blockquote>
<h2 id="8-4_优化当前情境">8.4 优化当前情境</h2><blockquote>
<p>如果有事物中断我们，打破我们的工作流，或导致我们分散了注意力，那将一切思路恢复到原状是相当昂贵的。我们把“将一切思路恢复到原状”称为情境切换。我们要看看为什么你需要不惜一切代价避免这种切换，以及如何避免分心并较好地管理中断。</p>
</blockquote>
<p>注: 管理中断</p>
<blockquote>
<p>多任务处理对生产力会造成重大损失。一项研究发现，一般情况下，多任务处理将耗费你百分之二十至四十的生产力</p>
</blockquote>
<p>注: 不要走神，专注！</p>
<blockquote>
<p>如果你深入进行了一项任务（如调试），然后被中断，那么可能需要平均20分钟返回到原来的工作状态。二十分钟，考虑一下你在一天中可能会遇到多少次打断，如果每次打断都需要二十分钟时间恢复，你一天中的相当一部分时间就都白白浪费了。这就是为什么程序员一般讨厌被中断，特别是被非程序员打断。</p>
</blockquote>
<p>注: 程序员厌恶被打断</p>
<blockquote>
<p>。科学家认为，试图把注意力同时放在几件事情上，意味着你在每件事情上都会处理得很差</p>
</blockquote>
<p>注: 一心不能二用</p>
<blockquote>
<p>仅扫描输入队列一次</p>
<p>顺序地处理每组工作</p>
<p>不要在头脑中保留清单</p>
</blockquote>
<h2 id="8-5_积极地管理干扰">8.5 积极地管理干扰</h2><blockquote>
<p>网络提供了各种各样的干扰。一切，从日常的垃圾邮件到YouTube上如何制作造雪机的视频、网站上有关选举舞弊和政治欺骗的讨论（如图8-5所示）、最亲密朋友发来的即时消息、Wikipedia上的新文章——所有的一切都在那里吸引和分散你的注意力。</p>
</blockquote>
<p>注: 干扰的来源</p>
<blockquote>
<p>诀窍42：制定交流规则来管理干扰。</p>
</blockquote>
<p>注: 规定下午不允许被打扰，上午为答疑时间</p>
<blockquote>
<p>可以的话，把它们全部关闭。</p>
</blockquote>
<p>注: 关闭电子邮件的通知提醒，每天设定闹钟，固定时间check邮件</p>
<blockquote>
<p>加大检查邮件的间隔</p>
<p>诀窍43：少发送邮件，你就会少收到邮件。</p>
<p>最后，最好的建议是对电子邮件眼不见心不烦。在不使用时退出电子邮件客户端。</p>
<p>提高进出情境的成本。<br>Make the cost obvious.</p>
</blockquote>
<p>注: 比如你想呆图书馆，就带上电源线，带上书包，多带点东西，其实就是在告诉自己，来一趟不容易，多待会吧</p>
<blockquote>
<p>诀窍45：屏蔽中断来保持注意力。</p>
<p>如果你认为可能在任何时刻被打断，那么你可以开始养成一种经常为自己留下小线索的习惯。</p>
</blockquote>
<p>注: 被打断后，要保存上下文，便于后面恢复的时候继续进行</p>
<h2 id="8-6_保持足够大的情境">8.6 保持足够大的情境</h2><blockquote>
<p>诀窍46：使用多台显示器来避免情境切换。</p>
</blockquote>
<p>注: 一台显示器能保存的东西就那么多，切换的过程中是有成本的。<br>第9章 超越专家</p>
<blockquote>
<p>真正的发现之旅不在于追求新大陆，而在于拥有新的视野。</p>
</blockquote>
<p>注: 从旧资源发现新的价值</p>
<h2 id="9-1_有效的改变">9.1 有效的改变</h2><blockquote>
<p>。根深蒂固的老习惯在大脑中形成了一条神经高速公路，而且不会主动消失。你可以在旁边建立新的神经高速公路，走不同的路线，抄近道，但是过去的高速公路仍然存在。它们总是在那里等你回来，重新依赖它们。</p>
</blockquote>
<p>注: 改变旧习惯的的办法就是用新的习惯来代替它。随着新的习惯被使用的越多，就的习惯也就因为失去大脑的“投资”而逐渐被代替</p>
<blockquote>
<p>“不作为”是敌人，而“错误”不是<br>请记住危险不在于做了错事，而在于根本没去做事情。不要害怕犯错误。</p>
</blockquote>
<p>注: 不要害怕做错事，错了改正才是好事</p>
<blockquote>
<p>采取步步为营的细小步骤<br>开始时目标设低一些。当你实现时奖励自己一下，再设立下一个小步骤。</p>
</blockquote>
<p>注: 步步为营</p>
<h2 id="9-3_超越专家">9.3 超越专家</h2><blockquote>
<p>在我们讨论了技能并变得更加专业之后，比专家更高的境界还有什么？看似一个奇怪的循环，在你变成专家之后，你最想追求的事情是……新手的思维。</p>
</blockquote>
<p>注: 回归开放性思维，这就是孩子与新手的可能性</p>
<blockquote>
<p>对于专家来说最致命的弱点是像专家一样行动。一旦你相信自己的专业水平，你就会对其他的可能性视而不见。你停止了好奇心。你可能开始抵制所属领域的改变，担心在你花费了很多努力才得以精通的主题上失去权威。你自己的判断和看法不再支持你，而是囚禁你。</p>
</blockquote>
<p>注: 保持学习心态</p>
<blockquote>
<p>你自己，认识当前时刻，认识你所处的情境。我认为失败的最大原因就是我们往往让事情自由发展。</p>
</blockquote>
<p>注: 认识自己。</p>
<blockquote>
<p>达芬奇在600年前抱怨说：“人们看却没有看见，听却没有听见，吃却没有味觉，接触却没有触觉，说话却没有思考。”我们一直在这样做：我们嘲笑快餐却并没有认真品尝它，我们听用户或者赞助商告诉我们他们在产品中到底想要什么，但是我们没有听到。我们看却没有看见。我们以为我们已经知道了。</p>
</blockquote>
<p>注: 反省</p>
<blockquote>
<p>当女孩第一次看衣服时，只是简单地说“黄色”。维梅尔鼓励女孩像他一样看待世界：充满了复杂和丰富的细节。这是我们都在面对的挑战——完全看清世界，不断看清世界，和我们自己。</p>
</blockquote>
<p>注: 不断看清世界，看清自己</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>程序员的思维修炼【美】Andy Hunt - <a href="http://book.douban.com/subject/26268555/">豆瓣链接</a></p>
<h2 id="1-1_再提“实用”">1.1 再提“实用”</h2><blockquote>
<p>Only dead fish go with the flow.</p>
</blockquote>
<h2 id="2-2_德雷福斯模型的5个阶段">2.2 德雷福斯模型的5个阶段</h2><blockquote>
<p>新手需要指令清单。<br>Novices need recipes.</p>
</blockquote>
<p>注: 新手需要步骤</p>
<blockquote>
<p>高级新手不想要全局思维。<br>Advanced beginners don’t want the big picture.</p>
</blockquote>
<p>注: 高级新手</p>
<blockquote>
<p>胜任者能够解决问题。<br>Competents can troubleshoot.</p>
<p>精通者能够自我纠正。<br>Proficient practitioners can self-correct.</p>
</blockquote>
<p>注: 会反思，找出问题</p>]]>
    
    </summary>
    
      <category term="思维训练" scheme="http://yuankui.me/tags/%E6%80%9D%E7%BB%B4%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记 - 大数据时代]]></title>
    <link href="http://yuankui.me/2015/05/big-data/"/>
    <id>http://yuankui.me/2015/05/big-data/</id>
    <published>2015-05-05T15:25:48.000Z</published>
    <updated>2015-06-05T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<p>大数据时代 - 【英】迈尔-舍恩伯格; 【英】库克耶 - <a href="http://book.douban.com/subject/20429677/" target="_blank" rel="external">豆瓣链接</a></p>
<h2 id="大数据，大挑战">大数据，大挑战</h2><blockquote>
<p>第二个改变就是，研究数据如此之多，以至于我们不再热衷于追求精确度</p>
</blockquote>
<p>注: 精确和一致性不是那么重要了<br>小数据时代的随机采样，最少的数据获得最多的信息</p>
<blockquote>
<p>，当样本数量达到了某个值之后，我们从新个体身上得到的信息会越来越少，就如同经济学中的边际效应递减一样。</p>
</blockquote>
<p>注: 样本差不多就行</p>
<blockquote>
<p>认为样本选择的随机性比样本数量更重要，这种观点是非常有见地的</p>
</blockquote>
<p>注: 样本的随机性</p>
<h2 id="全数据模式，样本=总体">全数据模式，样本=总体</h2><blockquote>
<p>。大数据是指不用随机分析法这样的捷径，而采用所有数据的方法。</p>
</blockquote>
<p>注: 大数据不是说数据大</p>
<h2 id="允许不精确">允许不精确</h2><blockquote>
<p>允许不精确</p>
</blockquote>
<p>注: 可以通过学习来自动纠错</p>
<blockquote>
<p>当然，数据不可能完全错误，但为了了解大致的发展趋势，我们愿意对精确性做出一些让步。</p>
<p>当数据只有500万的时候，有一种简单的算法表现得很差，但当数据达10亿的时候，它变成了表现最好的，准确率从原来的75%提高到了95%以上。</p>
</blockquote>
<p>注: 提高准确性</p>
<a id="more"></a>
<h2 id="大数据的简单算法比小数据的复杂算法更有效">大数据的简单算法比小数据的复杂算法更有效</h2><blockquote>
<p>大数据的简单算法比小数据的复杂算法更有效</p>
</blockquote>
<p>注: 数据相对于算法，前期收效更好</p>
<h2 id="纷繁的数据越多越好">纷繁的数据越多越好</h2><blockquote>
<p>我们要做的就是要接受这些纷繁的数据并从中受益，而不是以高昂的代价消除所有的不确定性。<br>混杂性，不是竭力避免，而是标准途径</p>
<p>。这些机制才能适应改变着的世界。当我们上传照片到Flickr网站的时候，我们会给照片添加标签。</p>
</blockquote>
<p>注: 标签代替分类</p>
<blockquote>
<p>。当一个人在网站上见到一个Facebook的“喜欢”按钮时，可以看到有多少其他人也在点击。当数量不多时，会显示像“63”这种精确的数字。当数量很大时，则只会显示近似值，比方说“4 000”。这并不代表系统不知道正确的数据是多少，只是当数量规模变大的时候，确切的数量已经不那么重要了。</p>
</blockquote>
<p>注: 数据量再大的时候，精确数字已经没有意义了。</p>
<blockquote>
<p>要想获得大规模数据带来的好处，混乱应该是一种标准途径，而不应该是竭力避免的。<br>新的数据库设计的诞生</p>
<p>社会将两个折中的想法不知不觉地渗入了我们的处事方法中，我们甚至不再把这当成一种折中，而是把它当成了事物的自然状态。</p>
</blockquote>
<p>注: 时代的限制，导致我们把妥协的方案当作最优方案，并且理所应当</p>
<blockquote>
<p>第一个折中是，我们默认自己不能使用更多的数据，所以我们就不会去使用更多的数据。</p>
<p>第二个折中出现在数据的质量上</p>
<p>相比依赖于小数据和精确性的时代，大数据因为更强调数据的完整性和混杂性，帮助我们进一步接近事实的真相。</p>
</blockquote>
<p>注: 大数据才是事实，才最接近事物的某个方面<br>关联物，预测的关键</p>
<blockquote>
<p>通过给我们找到一个现象的良好的关联物，相关关系可以帮助我们捕捉现在和预测未来。如果A和B经常一起发生，我们只需要注意到B发生了，就可以预测A也发生了。</p>
</blockquote>
<p>注: 相关性预测</p>
<blockquote>
<p>他们想利用信用报告和顾客市场分析数据来作为部分申请人的血液和尿液分析的关联物。</p>
</blockquote>
<p>注: 与其他公司合作，提供数据，针对这些数据的用户精准营销。比如掌康可以与丁香园合作，过去得慢病的人员名单，然后推荐他使用掌康的产品。同盾可以与招聘网站合作，获取那些招聘安全人员的公司，然后精准营销同盾的产品。</p>
<blockquote>
<p>孕大概第三个月的时候买很多无香乳液。几个月之后，她们会买一些营养品，比如镁、钙、锌。公司最终找出了大概20多种关联物，这些关联物可以给顾客进行“怀孕趋势”评分。这些相关关系甚至使得零售商能够比较准确地预测预产期，这样就能够在孕期的每个阶段给客户寄送相应的优惠券</p>
</blockquote>
<p>注: 更据数据挖掘一个用户怀孕的可能性，前提是假设这些女性拥有共性。<br>“是什么”，而不是“为什么”</p>
<blockquote>
<p>这个发现对决策者来说非常重要。如果只看到线性关系的话，那么政策重心应完全放在增加收入上，因为这样才能增加全民的幸福感。而一旦察觉到这种非线性关系，策略的重心就会变成提高低收入人群的收入水平，因为这样明显更划算。</p>
</blockquote>
<p>注: 分析结果指导决策</p>
<blockquote>
<p>通过去探求“是什么”而不是“为什么”，相关关系帮助我们更好地了解了这个世界。</p>
</blockquote>
<p>注: 帮助我们做决策就行了，不需要关心为什么关联，只要知道有关联就行了。<br>但是事实上得出结论后，我们还是最后反推事物的原因。这样决策才更有自信</p>
<blockquote>
<p>惰性，我们很少慢条斯理地思考问题。所以快速思维模式就占据了上风。因此，我们会经常臆想出一些因果关系，最终导致了对世界的错误理解。</p>
</blockquote>
<p>注: 错误也是因为信息分析太少，或者大脑急于需要一个结论，导致分析不全面。</p>
<blockquote>
<p>就像采样是我们无法处理全部数据时的捷径一样，这种找因果关系的方法也是我们大脑用来避免辛苦思考的捷径。</p>
</blockquote>
<p>注: 的确，很大部分原因是思维的惰性，不愿意花太多时间来思考这些没多大意义的问题。<br>但是，如果长期借助大数据，而不分析因果的做决策，人类就失去了思考，那活着还有什么意义吗？</p>
<blockquote>
<p>相关关系很有用，不仅仅是因为它能为我们提供新的视角，而且提供的视角都很清晰。而我们一旦把因果关系考虑进来，这些视角就有可能被蒙蔽掉。</p>
</blockquote>
<p>注: 嗯，通过相关关系的结论指导行为的同时，不要忘了分析因果，以便更自信的做决策。</p>
<blockquote>
<p>但在越来越多的情况下，快速清晰的相关关系分析甚至比慢速的因果分析更有用和更有效。慢速的因果分析集中体现为通过严格控制的实验来验证的因果关系，而这必然是非常耗时耗力的。</p>
</blockquote>
<p>注: 因果分析耗时耗力，有时候，为了能快速决策，往往没有时间精力来进行因果分析，所以，这个时候，拿着结论就用吧</p>
<h2 id="改变，从操作方式开始">改变，从操作方式开始</h2><blockquote>
<p>我们需要改变我们的操作方式，使用我们能收集到的所有数据，而不仅仅是使用样本。我们不能再把精确性当成重心，我们需要接受混乱和错误的存在。另外，我们应该侧重于分析相关关系，而不再寻求每个预测背后的原因。</p>
</blockquote>
<p>注: 前面几章内容的简介</p>
<h2 id="大数据，改变人类探索世界的方法">大数据，改变人类探索世界的方法</h2><blockquote>
<p>安德森也表示，用一系列的因果关系来验证各种猜想的传统研究范式已经不实用了，如今它已经被无需理论指导的纯粹的相关关系研究所取代。</p>
</blockquote>
<p>注: 相关分析取代因果分析</p>
<blockquote>
<p>不受限于传统的思维模式和特定领域里隐含的固有偏见，大数据才能为我们提供如此多新的深刻洞见。</p>
</blockquote>
<p>注: 大数据不受传统和领域的偏见的限制</p>
<blockquote>
<p>最后，我们解读研究结果的时候同样会使用理论。大数据时代绝对不是一个理论消亡的时代，相反地，理论贯穿于大数据分析的方方面面。</p>
</blockquote>
<p>注: 因果与相关相辅相成！</p>
<h2 id="数据，从最不可能的地方提取出来">数据，从最不可能的地方提取出来</h2><blockquote>
<p>越水重臣教授把一个从不被认为是数据、甚至不被认为和数据沾边的事物转化成了可以用数值来量化的数据模式</p>
</blockquote>
<p>注: 数据化</p>
<h2 id="数据化，不是数字化">数据化，不是数字化</h2><blockquote>
<p>我们还没有合适的词用来形容莫里和越水重臣教授所做的这些转变，所以我们姑且称其为“数据化”吧——这是指一种把现象转变为可制表分析的量化形式的过程。</p>
</blockquote>
<p>注: 把事物数据化后便于进一步分析</p>
<h2 id="量化一切，数据化的核心">量化一切，数据化的核心</h2><blockquote>
<p>量化一切，数据化的核心</p>
<p>。十字军东征给当地人民带来了彻头彻尾的灾难，但同时也把西欧文明带到了地中海东部，而其中最重要的引入就是阿拉伯数字</p>
</blockquote>
<p>注: 个人的悲剧，时代的喜剧</p>
<blockquote>
<p>到了19世纪，随着科学家们发明了新工具来测量和记录电流、气压、温度、声频之类的自然科学现象，科学已经离不开定量化了。</p>
</blockquote>
<p>注: 不断量化，没有量化就没有科学</p>
<blockquote>
<p>数字化带来了数据化，但是数字化无法取代数据化。</p>
</blockquote>
<p>注: 数字化是工具，数据化才是目的。进一步数据化也是目的，认识世界，改善世界才是目的</p>
<h2 id="当方位变成数据">当方位变成数据</h2><blockquote>
<p>，位置信息一被数据化，新的用途就犹如雨后春笋般涌现出来，而新价值也会随之不断催生。</p>
</blockquote>
<p>注: 位置信息也可以挖掘出个人的信息</p>
<h2 id="当沟通变成数据">当沟通变成数据</h2><blockquote>
<p>不可否认，其潜在用途非比寻常。一些消费者信贷领域的创业公司正考虑开发以Facebook社交图谱为依据的信用评分。</p>
</blockquote>
<p>注: 征信图谱</p>
<blockquote>
<p>。情绪真的已经被数据化了。</p>
</blockquote>
<p>注: Twitter将情绪数据化</p>
<blockquote>
<p>数据化不仅能将态度和情绪转变为一种可分析的形式，也可能转化人类的行为。这些行为难以跟踪，特别是在较大的社区和其中的子人群环境中。</p>
</blockquote>
<p>注: 量子力学，核心也是基于统计的。单独研究一个粒子是没有意义的，必须是一个粒子长期的，或者多个粒子的行为，才能总结出体现粒子的行为。</p>
<blockquote>
<p>和谷歌一样，一些社交网络（如Facebook, Twitter, LinkedIn, Foursquare）坐拥了大型数据的宝藏，一旦这些数据信息得到了深入分析，它们就能轻易获得社会各行各业以及三教九流的几乎所有的动态信息。</p>
</blockquote>
<p>注: 这些数据可以完全描绘整个社会，只是“分辨率”问题。</p>
<h2 id="世间万物的数据化">世间万物的数据化</h2><blockquote>
<p>自我量化”</p>
</blockquote>
<p>注: 可穿戴设备</p>
<blockquote>
<p>有了大数据的帮助，我们不会再将世界看作是一连串我们认为或是自然或是社会现象的事件，我们会意识到本质上世界是由信息构成的。</p>
</blockquote>
<p>注: 好吧，如果全是数据，那得多无聊</p>
<blockquote>
<p>各种各样的现实转化为数据，对今天的我们而言也许是新奇而有趣的，但在不久的将来，这将变成如同吃饭睡觉一样与生俱来的能力——这又让我想起了“数据”这个词语的拉丁语原意。<br>ReCaptcha与数据再利用</p>
<p>不同于物质性的东西，数据的价值不会随着它的使用而减少，而是可以不断地被处理。</p>
</blockquote>
<p>注: 数据就是点，这个点可以属于不同的面，也体现不同的价值</p>
<h2 id="数据的“潜在价值”">数据的“潜在价值”</h2><blockquote>
<p>数据的真实价值就像漂浮在海洋中的冰山，第一眼只能看到冰山一角，而绝大部分则隐藏在表面之下</p>
<p>总之，判断数据的价值需要考虑到未来它可能被使用的各种方式，而非仅仅考虑其目前的用途</p>
</blockquote>
<p>注: 考虑将来的用途，以便数据搜集的时候进行细化</p>
<blockquote>
<p>；莫里重新利用老船长的日志而发现了洋流。</p>
</blockquote>
<p>注: 要想获得宏观的视野，必须基于大数据，进行提炼，抽象</p>
<blockquote>
<p>认为物体拥有“储存着的”或“潜在的”能量，只是处于休眠状态，比如压缩了的弹簧或放置在小山顶的小球。</p>
</blockquote>
<p>注: 每个人也都有潜能，需要开发</p>
<blockquote>
<p>而在大数据时代，数据就像是一个神奇的钻石矿，在其首要价值被发掘之后仍能不断产生价值。</p>
</blockquote>
<p>注: 数据的价值是不断的</p>
<h2 id="数据创新2：重组数据">数据创新2：重组数据</h2><blockquote>
<p>处于休眠状态的数据的价值只能通过与另一个截然不同的数据集结合才能释放出来。用新的方式混合这些数据，我们可以做出很有创意的东西来。</p>
</blockquote>
<p>注: 数据重组</p>
<blockquote>
<p>随着大数据的出现，数据的总和比部分更有价值。当我们将多个数据集的总和重组在一起时，重组总和本身的价值也比单个总和更大。</p>
</blockquote>
<p>注: 因为多点可以形成面</p>
<h2 id="数据创新3：可扩展数据">数据创新3：可扩展数据</h2><blockquote>
<p>在此之前，监控摄像机仅用于安全保卫，是一项纯粹的成本支出，而现在却被视为一项可以增</p>
</blockquote>
<p>注: 根据人流，设计商品的最佳摆放位置</p>
<h2 id="数据创新4：数据的折旧值">数据创新4：数据的折旧值</h2><blockquote>
<p>企业拥有了更强的经济动机来保存数据，并再次用于相同或类似的用途。</p>
</blockquote>
<p>注: 创业点子：服务传统企业，搜集数据，并且提供数据服务</p>
<blockquote>
<p>比如十年前你在亚马逊买了一本书，而现在你可能已经对它完全不感兴趣。如果亚马逊继续用这个数据来向你推荐其他书籍，你就不太可能购买带有这类标题的书籍，甚至会担心该网站之后的推荐是否合理。</p>
</blockquote>
<p>注: 但是，数据具有重组性，我们可以根据这些历史数据，挖掘人类阅读习惯改变趋势，进而推荐用户下一步可能喜欢的阅读类型。</p>
<blockquote>
<p>同时也应当与第三方分享数据</p>
</blockquote>
<p>注: 数据共享</p>
<h2 id="数据创新5：数据废气">数据创新5：数据废气</h2><blockquote>
<p>它是用户在线交互的副产品，包括浏览了哪些页面、停留了多久、鼠标光标停留的位置、输入了什么信息等</p>
</blockquote>
<p>注: 通常指那些表面上没有什么价值的数据</p>
<blockquote>
<p>当用户指出语音识别程序误解了他们的意思时，他们实际上有效地“训练”了这个系统，让它变得更好。</p>
</blockquote>
<p>注: 做错事，比不作为更好</p>
<h2 id="给数据估值">给数据估值</h2><blockquote>
<p>公司账面价值和市场价值之间的差额被记为“无形资产”。</p>
</blockquote>
<p>注: Facebook最值钱的就是数据</p>
<blockquote>
<p>硅谷技术专家和科技出版社员工蒂姆·奥莱利（Tim O’Reilly）的话来说就是，“数据是一个平台”，因为数据是新产品和新商业模式的基石。</p>
</blockquote>
<p>注: 基于数据创新<br>Decide.com与商品价格预测</p>
<blockquote>
<p>但是事实上，让Decide.com异军突起的不是数据，不是技术，而是思维观念。</p>
</blockquote>
<p>注: 如何利用数据，呈现数据的哪个切面，这就是观念</p>
<h2 id="大数据价值链的3大构成">大数据价值链的3大构成</h2><blockquote>
<p>根据所提供价值的不同来源，分别出现了三种大数据公司。这三种来源是指：数据本身、技能与思维。<br>第一种是基于数据本身的公司。这些公司拥有大量数据或者至少可以收集到大量数据，却不一定有从数据中提取价值或者用数据催生创新思想的技能。最好的例子就是Twitter，它拥有海量数据这一点是毫无疑问的，但是它的数据都通过两个独立的公司授权给别人使用。<br>第二种是基于技能的公司。</p>
</blockquote>
<p>注: 数据，提炼数据，提炼什么数据</p>
<blockquote>
<p>如果你想成功，你不应该成为一个普通的、可被随意替代的人，你应该成为稀缺的、不可替代的那类人，”他还说，“数据非常之多而且具有战略重要性，但是真正缺少的是从数据中提取价值的能力。这也就是为什么统计学家、数据库管理者和掌握机器理论的人是真正了不起的人。</p>
</blockquote>
<p>注: 不可替代性</p>
<blockquote>
<p>一个称为MasterCard Advisors的部门收集和分析了来自210个国家的15亿信用卡用户的650亿条交易记录，用来预测商业发展和客户的消费趋势。然后，它把这些分析结果卖给其他公司。它发现，如果一个人在下午四点左右给汽车加油的话，他很可能在接下来的一个小时内要去购物或者去餐馆吃</p>
</blockquote>
<p>注: 了解用户，懂他所需，推荐所需</p>
<blockquote>
<p>大数据拥有者依靠技术专家来挖掘数据的价值。但是，虽然受到了高度的赞扬，而且同时拥有“数据武士”这样时髦的名字，但技术专家并没有想象中那么耀眼。他们在大数据中淘金，发现了金银珠宝，可是最后却要把这些财富拱手让给大数据拥有者。</p>
</blockquote>
<p>注: 打工者，体力劳动者</p>
<blockquote>
<p>他们思考的只有可能，而不考虑所谓的可行。</p>
</blockquote>
<p>注: PD</p>
<blockquote>
<p>大数据思维，是指一种意识，认为公开的数据一旦处理得当就能为千百万人急需解决的问题提供答案。</p>
</blockquote>
<p>注: 懂得应该挖掘数据的某方面价值</p>
<h2 id="数据创新2：重组数据-1">数据创新2：重组数据</h2><blockquote>
<p>人类从依靠自身判断做决定到依靠数据做决定的转变，也是大数据做出的最大贡献之一。行业专家和技术专家的光芒都会因为统计学家和数据分析家的出现而变暗，因为后者不受旧观念的影响，能够聆听数据发出的声音</p>
</blockquote>
<p>注: 依靠数据说话</p>
<blockquote>
<p>什么”和“哪里”比“为什么”更加重要。</p>
</blockquote>
<p>注: 人可能过得更轻松了，因为不用思考那么多为什么，但这样的话人的意义就没有了吧</p>
<h2 id="我们的隐私被二次利用了">我们的隐私被二次利用了</h2><blockquote>
<p>，只要有足够的数据，那么无论如何都做不到完全的匿名化</p>
</blockquote>
<p>注: 匿名对于大数据的无效性</p>
<h2 id="预测与惩罚，不是因为“所做”，而是因为“将做”">预测与惩罚，不是因为“所做”，而是因为“将做”</h2><blockquote>
<p>因此，大数据通过给予我们关于个人自身更详尽的数据信息，帮我们规避了“画像”的缺陷——直接将群体特征强加于个人。</p>
</blockquote>
<p>注: 因为恐怖分子都是阿拉伯人，而对所有的阿拉伯人进行详细检查</p>
<blockquote>
<p>社会关于个人责任的基本信条是，人为其选择的行为承担责任。如果有人在被别人用枪威胁的情况下打开了公司的保险柜，他并不需要承担责任，因为他别无选择。</p>
</blockquote>
<p>注: 为自己的选择承担责任</p>
<h2 id="数据独裁">数据独裁</h2><blockquote>
<p>其威胁就是，我们可能会完全受限于我们的分析结果，即使这个结果理应受到质疑。或者说，我们会形成一种对数据的执迷，因而仅仅为了收集数据而收集数据，或者赋予数据根本无权得到的信任。</p>
</blockquote>
<p>注: 数据为人类服务，而不能主宰人类</p>
<blockquote>
<p>其实，卓越的才华并不依赖于数据</p>
</blockquote>
<p>注: 专家依靠本能</p>
<blockquote>
<p>只要得到了合理的利用，而不单纯只是为了“数据”而“数据”，大数据就会变成强大的武器。</p>
</blockquote>
<p>注: 不要为了数据而数据</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大数据时代 - 【英】迈尔-舍恩伯格; 【英】库克耶 - <a href="http://book.douban.com/subject/20429677/">豆瓣链接</a></p>
<h2 id="大数据，大挑战">大数据，大挑战</h2><blockquote>
<p>第二个改变就是，研究数据如此之多，以至于我们不再热衷于追求精确度</p>
</blockquote>
<p>注: 精确和一致性不是那么重要了<br>小数据时代的随机采样，最少的数据获得最多的信息</p>
<blockquote>
<p>，当样本数量达到了某个值之后，我们从新个体身上得到的信息会越来越少，就如同经济学中的边际效应递减一样。</p>
</blockquote>
<p>注: 样本差不多就行</p>
<blockquote>
<p>认为样本选择的随机性比样本数量更重要，这种观点是非常有见地的</p>
</blockquote>
<p>注: 样本的随机性</p>
<h2 id="全数据模式，样本=总体">全数据模式，样本=总体</h2><blockquote>
<p>。大数据是指不用随机分析法这样的捷径，而采用所有数据的方法。</p>
</blockquote>
<p>注: 大数据不是说数据大</p>
<h2 id="允许不精确">允许不精确</h2><blockquote>
<p>允许不精确</p>
</blockquote>
<p>注: 可以通过学习来自动纠错</p>
<blockquote>
<p>当然，数据不可能完全错误，但为了了解大致的发展趋势，我们愿意对精确性做出一些让步。</p>
<p>当数据只有500万的时候，有一种简单的算法表现得很差，但当数据达10亿的时候，它变成了表现最好的，准确率从原来的75%提高到了95%以上。</p>
</blockquote>
<p>注: 提高准确性</p>]]>
    
    </summary>
    
      <category term="思维训练" scheme="http://yuankui.me/tags/%E6%80%9D%E7%BB%B4%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
</feed>